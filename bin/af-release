#!/bin/bash


init() {
  require_git_repo
  require_af_initialized
  af_load_settings
  af_load_version
}


cmd_default() {
  usage
  exit 0
}


cmd_create() {
  parse_args "$@"

  RELEASE_VERSION=$VERSION_A.$(($VERSION_B + 1))
  if [[ "$VERSION_NAME" = "" ]]; then
    RELEASE_NAME="_"
  else
    RELEASE_NAME=$VERSION_NAME
  fi
  SPRINT_NUMBER=$VERSION_C

  question_short_version RELEASE_VERSION "release version" "$RELEASE_VERSION"
  question_version_name RELEASE_NAME "release version name (_ for empty)" "$RELEASE_NAME"

  RELEASE_BRANCH="$RELEASE_PREFIX$RELEASE_VERSION"
  RELEASE_TAG="$RELEASE_VERSION.0.0"
 
  # sanity checks
  require_clean_working_tree
  require_current_branch $MASTER_BRANCH
  require_branch_absent $RELEASE_BRANCH
  require_tag_absent $RELEASE_TAG

  
  mssg "pull from origin/$MASTER_BRANCH into $MASTER_BRANCH"

  git_do fetch origin
  git_do pull origin

  
  mssg "create release branch: $RELEASE_BRANCH"

  git_do checkout -b "$RELEASE_BRANCH"


  ./af hotfix start setup version
  

  NEW_VERSION="$RELEASE_VERSION.0.1"
  
  mssg "set release version in $RELEASE_BRANCH branch: $NEW_VERSION ($RELEASE_NAME)"

  af_update_version $NEW_VERSION $RELEASE_NAME
  af_load_version


  mssg "commit new version files to branch"

  git_do add -A
  git_do commit -a -m "### set release version: $NEW_VERSION"

  
  ./af hotfix finish -f -n


  mssg "create tag '$RELEASE_TAG'"

  git_do tag -a -m "### tag: $RELEASE_TAG" "$RELEASE_TAG" "$RELEASE_BRANCH" || \
    die "Tagging failed. Please run finish again to retry."


  mssg "push tag '$RELEASE_TAG' to origin"

  git_do push origin "$RELEASE_TAG" || \
    die "Pushing tag to origin failed. Please run finish again to retry."


  mssg "checkout to $MASTER_BRANCH"

  git_do checkout "$MASTER_BRANCH"


  MASTER_VERSION=$VERSION_A.$(($VERSION_B + 1))
  if [[ "$VERSION_NAME" = "" ]]; then
    MASTER_NAME="_"
  else
    MASTER_NAME=$VERSION_NAME
  fi

  question_short_version MASTER_VERSION "new master version" "$MASTER_VERSION"
  question_version_name MASTER_NAME "new master version name (_ for empty)" "$MASTER_NAME"

  MASTER_TAG="$MASTER_VERSION.$(($SPRINT_NUMBER + 1)).0"


  ./af feature start update version


  NEW_MASTER_VERSION="$MASTER_VERSION.$(($SPRINT_NUMBER + 1)).1"

  mssg "set new dev version in master branch: $NEW_MASTER_VERSION ($MASTER_NAME)"

  af_update_version $NEW_MASTER_VERSION $MASTER_NAME
  af_load_version

  mssg "commit new version files to branch"

  git_do add -A
  git_do commit -a -m "### set next dev version: $NEW_MASTER_VERSION"


  ./af feature finish -f


  mssg "create tag '$MASTER_TAG'"

  git_do tag -a -m "### tag: $MASTER_TAG" "$MASTER_TAG" "$MASTER_BRANCH" || \
    die "Tagging failed. Please run finish again to retry."

  mssg "push tag '$MASTER_TAG' to origin"

  git_do push origin "$MASTER_TAG" || \
    die "Pushing tag to origin failed. Please run finish again to retry."


  mssg "checkout to $RELEASE_BRANCH"

  git_do checkout "$RELEASE_BRANCH"
}

cmd_list() {
  parse_args "$@"


  local_branches=( `git_local_branches` )
  current_branch=( `git_current_branch` )

  printed="NO"
  for branch in ${local_branches[@]}; do
    if [[ $branch == $RELEASE_PREFIX* ]] ; then

      if [[ $branch == $current_branch ]] ; then
        clr_green "* $branch"
      else
        clr_blue "  $branch"
      fi

      printed="YES"
    fi
  done

  if [[ $printed == "NO" ]] ; then
    clr_brown "  nothing"
  fi
}


usage_init() {
  FLAGS_HELP=`cat << EndOfMessage
USAGE: af release create [-s] [-g] [-h]
       af release list [-s] [-g] [-h]

subcommans:
  create          Create release branch (run on master branch)."
  list            Print all release branches
 
EndOfMessage`
}

