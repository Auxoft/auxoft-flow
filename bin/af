#!/bin/sh


# enable debug mode
if [ "$DEBUG" = "yes" ]; then
  set -x
fi


# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export AF_DIR=$(dirname $0)


usage() {
  flags_help
}


main() {
  # load common functionality
  . "$AF_DIR/af-common"

  # This environmental variable fixes non-POSIX getopt style argument
  # parsing, effectively breaking git-flow subcommand parsing on several
  # Linux platforms.
  export POSIXLY_CORRECT=1

  # use the shFlags project to parse the command line arguments
  . "$AF_DIR/shFlags/src/shflags"
  FLAGS_PARENT="af"
  
  usage_init
  DEFINE_boolean show_commands false 'show actions taken (git commands)' g
  DEFINE_boolean silent false 'silent mode running' s

  # do actual parsing
  FLAGS "$@" || exit $?
  eval set -- "${FLAGS_ARGV}"

  if [ $# -lt 1 ] || flag help; then
    usage
    exit 1
  fi

  # sanity checks
  SUBCOMMAND="$1"; shift

  if [ ! -e "$AF_DIR/af-$SUBCOMMAND" ]; then
    usage
    exit 1
  fi

  # run command
  . "$AF_DIR/af-$SUBCOMMAND"
  FLAGS_PARENT="af $SUBCOMMAND"
  usage_init

  # test if the first argument is a flag (i.e. starts with '-')
  # in that case, we interpret this arg as a flag for the default
  # command
  SUBACTION="default"
  if [ "$1" != "" ] && { ! echo "$1" | grep -q "^-"; } then
    SUBACTION="$1"; shift
  fi
  if ! type "cmd_$SUBACTION" >/dev/null 2>&1; then
    warn "Unknown subcommand: '$SUBACTION'"
    usage
    exit 1
  fi
 
  # run the specified action
  if [ $SUBCOMMAND != "init" ] && [ $SUBCOMMAND != "install" ] ; then
    init
  fi
  cmd_$SUBACTION "$@"
}


usage_init() {
  FLAGS_HELP=`cat << EndOfMessage
USAGE: af <subcommand> [-g] [-s] [-h]

Try 'af <subcommand> -h' for details.

subcommands:
  install             Install af to your project, need run in root project folder (sampless:  ./bin/af/af install).
  init                Initialize a new git repo with support for the branching model.
  feature             Manage your feature branches (run on master or feature/* branches).
  nightbuild          Create nightbuild (run on master branch).
  sprintbuild         Create sprintbuild and update files to next sprint (run on master branch).
  release             Manage release branch (run on master or release/*.* branches).
  hotfix              Manage your hotfix branches (run on master or hotfix/* branches).
  run                 Run external specific to your project commands.
  
EndOfMessage`
}


main "$@"
