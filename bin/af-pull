#!/bin/bash


init() {
  require_git_repo
  require_af_initialized
  af_load_settings
}


cmd_default() {
  DEFINE_boolean all false 'push all release/* and master branches' a
  DEFINE_boolean allAll false 'push all branches' A

  parse_args "$@"

  require_clean_working_tree

  declare -a push_branches
  push_branches+=( `git_current_branch` )

  current_branch=( `git_current_branch` )
  local_branches=( `git_local_branches` )
  remote_branches=( `git_remote_branches` )

  # remove builds branches
  for branch in ${local_branches[@]}; do
    if [[ $branch == $NIGHTBUILD_PREFIX* ]] \
       || [[ $branch == $SPRINTBUILD_PREFIX* ]] \
       || [[ $branch == $RCBUILD_PREFIX* ]] \
       || [[ $branch == $PATCHBUILD_PREFIX* ]] \
       || [[ $branch == $RELEASEBUILD_PREFIX* ]] ; then

      local_branches=( "${local_branches[@]/$branch}" )
    fi
  done

  # if not set -A then remove all branches is not release/* or master
  if ! flag allAll ; then
    for branch in ${local_branches[@]}; do
      if [[ $branch != $MASTER_BRANCH ]] && [[ $branch != $RELEASE_PREFIX* ]] ; then
        local_branches=( "${local_branches[@]/$branch}" )
      fi
    done
  fi

  if flag all || flag allAll ; then
    for branch in ${local_branches[@]}; do
      push_branches+=($branch)
    done
  fi

  push_branches=( $(echo "${push_branches[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') )

  for branch in ${push_branches[@]}; do
    if ! [[ $branch == $current_branch ]] ; then
      if ! has "$ORIGIN/$branch" $(git_remote_branches) ; then
        push_branches=( "${push_branches[@]/$branch}" )
      fi
    fi
  done

  for branch in ${push_branches[@]}; do
    if ! [[ $branch == $current_branch ]] ; then
      mssg "checkout to branch: $branch"

      git_do checkout "$branch"
    fi
  
    mssg "pull from origin/$branch into $branch"

    git_do fetch origin
    git_do pull origin
  done

  new_current_branch=( `git_current_branch` )
  if ! [[ $new_current_branch == $current_branch ]] ; then
    mssg "checkout to branch: $current_branch"

    git_do checkout "$current_branch"
  fi

  mssg "done"
}


cmd_help() {
  usage
  exit 0
}


usage_init() {
  FLAGS_HELP=`cat << EndOfMessage
USAGE: af pull [-g] [-s] [-h] [-f] [-a] [-A]
 
EndOfMessage`
}
