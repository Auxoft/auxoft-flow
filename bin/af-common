#!/bin/bash


#
# Common functionality
#

# shell output
mssg() {
  if ! flag silent; then
    clr_green " # $@"
  fi  
}
warn() { clr_brown " * $@" >&2; }
die() { clr_red " ** $@" >&2; exit 1; }

escape() {
  echo "$1" | sed 's/\([\.\$\*]\)/\\\1/g'
}


# shell input
question_yn() {
  local result=false
  while true; do
    read -r -p "$1 " response
    if [[ "$response" = "" ]]; then
      response="$2"
    fi
    case $response in
      [yY]* ) 
          result=true
          break
          ;;

      [nN]* ) 
          result=false
          break
          ;;

      * ) echo "Please answer yes or no.";;
    esac
  done
  $result
}

question_Yn() {
  question_yn "$1 [Y/n]" "Y"
}

question_yN() {
  question_yn "$1 [y/N]" "N"
}

question_regex() {
  local result=$1
  while true; do
    read -r -p "$2 [$3]: " response
    if [[ "$response" = "" ]]; then
      response="$3"
   fi
    if expr "$response" : "$4" >/dev/null; then
      eval $result="'$response'"
      break
    elif [[ "$response" = "_" ]]; then
      eval $result="''"
      break
    else
      echo "Bad format response."
    fi
  done
}

question_short_version() {
  question_regex $1 "$2" "$3" "^[0-9]\{1,\}\.[0-9]\{1,\}$"
}

question_long_version() {
  question_regex $1 "$2" "$3" "^[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}$"
}

question_version_name() {
  question_regex $1 "$2" "$3" "^[a-zA-Z][a-zA-Z0-9]\{0,\}$"
}


# set logic
has() {
  local item=$1; shift
  echo " $@ " | grep -q " $(escape $item) "
}

# basic math
min() { [ "$1" -le "$2" ] && echo "$1" || echo "$2"; }
max() { [ "$1" -ge "$2" ] && echo "$1" || echo "$2"; }

# basic string matching
startswith() { [ "$1" != "${1#$2}" ]; }
endswith() { [ "$1" != "${1%$2}" ]; }

# convenience functions for checking shFlags flags
flag() { local FLAG; eval FLAG='$FLAGS_'$1; [ $FLAG -eq $FLAGS_TRUE ]; }
noflag() { local FLAG; eval FLAG='$FLAGS_'$1; [ $FLAG -ne $FLAGS_TRUE ]; }

parse_args() {
  # parse options
  FLAGS "$@" || exit $?
  eval set -- "${FLAGS_ARGV}"
}


#
# Git specific common functionality
#

git_do() {
  # equivalent to git, used to indicate actions that make modifications
  if flag show_commands; then
    # message=
    echo "' > git $@'"
    # clr_blue "git" $@
    # clr_blue $@
  fi
  if flag silent; then
    git "$@" &> /dev/null
  else
    git "$@"
  fi
}

git_local_branches() { git branch --no-color | sed 's/^[* ] //'; }
git_remote_branches() { git branch -r --no-color | sed 's/^[* ] //'; }
git_all_branches() { ( git branch --no-color; git branch -r --no-color) | sed 's/^[* ] //'; }
git_all_tags() { git tag; }

git_current_branch() {
  git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

git_is_clean_working_tree() {
  if ! git diff --no-ext-diff --ignore-submodules --quiet --exit-code; then
    return 1
  elif ! git diff-index --cached --quiet --ignore-submodules HEAD --; then
    return 2
  else
    return 0
  fi
}

git_repo_is_headless() {
  ! git rev-parse --quiet --verify HEAD >/dev/null 2>&1
}

git_local_branch_exists() {
  has $1 $(git_local_branches)
}

git_remote_branch_exists() {
  has $1 $(git_remote_branches)
}

git_branch_exists() {
  has $1 $(git_all_branches)
}

git_tag_exists() {
  has $1 $(git_all_tags)
}

#
# git_compare_branches()
#
# Tests whether branches and their "origin" counterparts have diverged and need
# merging first. It returns error codes to provide more detail, like so:
#
# 0    Branch heads point to the same commit
# 1    First given branch needs fast-forwarding
# 2    Second given branch needs fast-forwarding
# 3    Branch needs a real merge
# 4    There is no merge base, i.e. the branches have no common ancestors
#
git_compare_branches() {
  local commit1=$(git rev-parse "$1")
  local commit2=$(git rev-parse "$2")
  if [ "$commit1" != "$commit2" ]; then
    local base=$(git merge-base "$commit1" "$commit2")
    if [ $? -ne 0 ]; then
      return 4
    elif [ "$commit1" = "$base" ]; then
      return 1
    elif [ "$commit2" = "$base" ]; then
      return 2
    else
      return 3
    fi
  else
    return 0
  fi
}

#
# git_is_branch_merged_into()
#
# Checks whether branch $1 is succesfully merged into $2
#
git_is_branch_merged_into() {
  local subject=$1
  local base=$2
  local all_merges="$(git branch --no-color --contains $subject | sed 's/^[* ] //')"
  has $base $all_merges
}


#
# Auxoft flow specific common functionality
#

# check if this repo has been inited for Auxoft Flow
af_has_version_configured() {
  git config --get auxoft.core.version >/dev/null 2>&1
}

af_has_master_configured() {
  local master=$(git config --get auxoft.branch.master)
  [ "$master" != "" ] && git_local_branch_exists "$master"
}

af_has_prefixes_configured() {
  git config --get auxoft.prefix.feature >/dev/null 2>&1        && \
  git config --get auxoft.prefix.hotfix >/dev/null 2>&1         && \
  git config --get auxoft.prefix.release >/dev/null 2>&1        && \
  git config --get auxoft.prefix.nightbuild >/dev/null 2>&1     && \
  git config --get auxoft.prefix.sprintbuild >/dev/null 2>&1    && \
  git config --get auxoft.prefix.rcbuild >/dev/null 2>&1        && \
  git config --get auxoft.prefix.patchbuild >/dev/null 2>&1     && \
  git config --get auxoft.prefix.releasebuild >/dev/null 2>&1
}

af_is_initialized() {
  af_has_version_configured                                     && \
  af_has_master_configured                                      && \
  af_has_prefixes_configured
}

# loading settings that can be overridden using git config
af_load_settings() {
  export ORIGIN="origin"
  export DOT_GIT_DIR=$(git rev-parse --git-dir 2>/dev/null)
  export MASTER_BRANCH=$(git config --get auxoft.branch.master)
  export FEATURE_PREFIX=$(git config --get auxoft.prefix.feature)
  export HOTFIX_PREFIX=$(git config --get auxoft.prefix.hotfix)
  export RELEASE_PREFIX=$(git config --get auxoft.prefix.release)
  export NIGHTBUILD_PREFIX=$(git config --get auxoft.prefix.nightbuild)
  export SPRINTBUILD_PREFIX=$(git config --get auxoft.prefix.sprintbuild)
  export RCBUILD_PREFIX=$(git config --get auxoft.prefix.rcbuild)
  export PATCHBUILD_PREFIX=$(git config --get auxoft.prefix.patchbuild)
  export RELEASEBUILD_PREFIX=$(git config --get auxoft.prefix.releasebuild)
}

af_load_version() {
  AF_DIR=$(dirname $0)

  declare -a versions
  versions=( `sh $AF_DIR/hooks/version-get` )

  export VERSION=${versions[0]}
  export VERSION_NAME=${versions[1]}

  version_parts=(${VERSION//./ })
  if [[ ${#version_parts[@]} > 0 ]]; then
    export VERSION_A=${version_parts[0]}
  else
    export VERSION_A="0"
  fi
  if [[ ${#version_parts[@]} > 1 ]]; then
    export VERSION_B=${version_parts[1]}
  else
    export VERSION_B="0"
  fi
  if [[ ${#version_parts[@]} > 2 ]]; then
    export VERSION_C=${version_parts[2]}
  else
    export VERSION_C="0"
  fi
  if [[ ${#version_parts[@]} > 3 ]]; then
    export VERSION_D=${version_parts[3]}
  else
    export VERSION_D="0"
  fi

  CURRENT_BRANCH=`git_current_branch`

  if [[ $CURRENT_BRANCH == $MASTER_BRANCH ]]; then
    export VERSION_SHORT=$VERSION
    export VERSION_TYPE="dev"
    export VERSION_SUFIX=""
  elif [[ $CURRENT_BRANCH == $FEATURE_PREFIX* ]]; then
    export VERSION_SHORT=$VERSION
    export VERSION_TYPE="feature"
    export VERSION_SUFIX=""
  elif [[ $CURRENT_BRANCH == $HOTFIX_PREFIX* ]]; then
    export VERSION_SHORT=$VERSION
    export VERSION_TYPE="hotfix"
    export VERSION_SUFIX=""
  elif [[ $CURRENT_BRANCH == $NIGHTBUILD_PREFIX* ]]; then
    export VERSION_SHORT=$VERSION
    export VERSION_TYPE="nightbuild"
    export VERSION_SUFIX="-nb$VERSION_C.$VERSION_D"
  elif [[ $CURRENT_BRANCH == $SPRINTBUILD_PREFIX* ]]; then
    export VERSION_SHORT=$VERSION
    export VERSION_TYPE="sprintbuild"
    export VERSION_SUFIX="-sp$(($VERSION_C - 1))"
  elif [[ $CURRENT_BRANCH == $RCBUILD_PREFIX* ]]; then
    export VERSION_SHORT=$VERSION
    export VERSION_TYPE="rcbuild"
    export VERSION_SUFIX="-rc$VERSION_D"
  elif [[ $CURRENT_BRANCH == $PATCHBUILD_PREFIX* ]]; then
    export VERSION_SHORT=$VERSION
    export VERSION_TYPE="patchbuild"
    export VERSION_SUFIX="-patch$VERSION_D"
  elif [[ $CURRENT_BRANCH == $RELEASEBUILD_PREFIX* ]]; then
    export VERSION_SHORT=$VERSION_A.$VERSION_B.$VERSION_C
    export VERSION_TYPE="releasebuild"
    export VERSION_SUFIX=""
  elif [[ $CURRENT_BRANCH == $RELEASE_PREFIX* ]]; then
    export VERSION_SHORT=$VERSION
    export VERSION_TYPE="release"
    export VERSION_SUFIX=""
  fi

  if [[ $VERSION_SUFIX == "" ]]; then
    VERSION_MIDDLE=$VERSION_SHORT
  else
    VERSION_MIDDLE=$VERSION_SHORT$VERSION_SUFIX
  fi

  if [[ $VERSION_NAME == "" ]]; then
    VERSION_LONG=$VERSION_MIDDLE
  else
    VERSION_LONG=$VERSION_MIDDLE"+"$VERSION_NAME
  fi
}

af_update_version() {
  $AF_DIR/hooks/version-set $@
}

#
# af_resolve_nameprefix
#
# Inputs:
# $1 = name prefix to resolve
# $2 = branch prefix to use
#
# Searches branch names from git_local_branches() to look for a unique
# branch name whose name starts with the given name prefix.
#
# There are multiple exit codes possible:
# 0: The unambiguous full name of the branch is written to stdout
#    (success)
# 1: No match is found.
# 2: Multiple matches found. These matches are written to stderr
#
af_resolve_nameprefix() {
  local name=$1
  local prefix=$2
  local matches
  local num_matches

  # first, check if there is a perfect match
  if git_local_branch_exists "$prefix$name"; then
    echo "$name"
    return 0
  fi

  matches=$(echo "$(git_local_branches)" | grep "^$(escape "$prefix$name")")
  num_matches=$(echo "$matches" | wc -l)
  if [ -z "$matches" ]; then
    # no prefix match, so take it literally
    warn "No branch matches prefix '$name'"
    return 1
  else
    if [ $num_matches -eq 1 ]; then
      echo "${matches#$prefix}"
      return 0
    else
      # multiple matches, cannot decide
      warn "Multiple branches match prefix '$name':"
      for match in $matches; do
        warn "- $match"
      done
      return 2
    fi
  fi
}


#
# Assertions for use in git-flow subcommands
#

require_git_repo() {
  if ! git rev-parse --git-dir >/dev/null 2>&1; then
    die "fatal: Not a git repository"
  fi
}

require_af_initialized() {
  if ! af_is_initialized; then
    die "fatal: Not a af-enabled repo yet. Please run \"af init\" first."
  fi
}

require_clean_working_tree() {
  git_is_clean_working_tree
  local result=$?
  if [ $result -eq 1 ]; then
    die "fatal: Working tree contains unstaged changes. Aborting."
  fi
  if [ $result -eq 2 ]; then
    die "fatal: Index contains uncommited changes. Aborting."
  fi
}

require_local_branch() {
  if ! git_local_branch_exists $1; then
    die "fatal: Local branch '$1' does not exist and is required."
  fi
}

require_remote_branch() {
  if ! has $1 $(git_remote_branches); then
    die "Remote branch '$1' does not exist and is required."
  fi
}

require_branch() {
  if ! has $1 $(git_all_branches); then
    die "Branch '$1' does not exist and is required."
  fi
}

require_branch_absent() {
  if has $1 $(git_all_branches); then
    die "Branch '$1' already exists. Pick another name."
  fi
}

require_current_branch() {
  local result=$(git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g')
  if [[ "$1" != "$result" ]]; then
    die "Branch '$1' is not current."
  fi
}

require_current_branch_prefix() {
  local result=$(git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g')
  if [[ ! $result == $1* ]]; then
    die "Branch prefix '$1' is not current."
  fi
}

require_tag_absent() {
  for tag in $(git_all_tags); do
    if [ "$1" = "$tag" ]; then
      die "Tag '$1' already exists. Pick another name."
    fi
  done
}

require_branches_equal() {
  require_local_branch "$1"
  require_remote_branch "$2"
  git_compare_branches "$1" "$2"
  local status=$?
  if [ $status -gt 0 ]; then
    warn "Branches '$1' and '$2' have diverged."
    if [ $status -eq 1 ]; then
      die "And branch '$1' may be fast-forwarded."
    elif [ $status -eq 2 ]; then
      # Warn here, since there is no harm in being ahead
      warn "And local branch '$1' is ahead of '$2'."
    else
      die "Branches need merging first."
    fi
  fi
}
