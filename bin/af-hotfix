#!/bin/sh


init() {
  require_git_repo
  require_af_initialized
  af_load_settings
  af_load_version
}


usage() {
  echo "usage: af hotfix start <name>"
  echo "       af hotfix finish"
}


cmd_default() {
  cmd_help "$@"
}


cmd_start() {
  if [[ "$1" = "" ]]; then
    usage
    exit 1
  fi

  HOTFIX_NAME=""
  while [[ ! "$1" = "" ]] ; do
    if [[ "$HOTFIX_NAME" = "" ]] ; then
      HOTFIX_NAME="$1"
    else
      name="_$1"
      HOTFIX_NAME="$HOTFIX_NAME$name"
    fi
    shift
  done

  HOTFIX_BRANCH="$HOTFIX_PREFIX$HOTFIX_NAME"

  require_current_branch_prefix $RELEASE_PREFIX
  require_branch_absent $HOTFIX_BRANCH

  
  mssg "pull from origin/$RELEASE_PREFIX into $RELEASE_PREFIX"

  git_do fetch -q origin
  git_do pull -q origin


  mssg "create hotfix branch: $HOTFIX_BRANCH"

  # create branch
  git_do checkout -b "$HOTFIX_BRANCH" || \
    die "Could not check out $HOTFIX_BRANCH"


  mssg "done"
}


cmd_finish() {
  HOTFIX_BRANCH=`git_current_branch`
  RELEASE_BRANCH="$RELEASE_PREFIX$VERSION_A.$VERSION_B"

  HOTFIX_NAME=`echo "$HOTFIX_BRANCH" | sed -e "s!^$HOTFIX_PREFIX!!"`

  PATCH_FILE="./patches/hotfix_$HOTFIX_NAME.patch"
  APPLIED_PATCH_FILE="./patches/applied/hotfix_$HOTFIX_NAME.patch"

  PATCH_PREFIX="apply_patch_"
  PATCH_FEATURE_NAME="$PATCH_PREFIX$HOTFIX_NAME"


  require_clean_working_tree
  require_current_branch_prefix $HOTFIX_PREFIX

  if has "$ORIGIN/$RELEASE_BRANCH" $(git_remote_branches); then
    require_branches_equal "$RELEASE_BRANCH" "$ORIGIN/$RELEASE_BRANCH"
  fi

  if git_is_branch_merged_into "$HOTFIX_BRANCH" "$MASTER_BRANCH"; then
    die "There were merge conflicts from $HOTFIX_BRANCH into $MASTER_BRANCH."
  fi


  mssg "checkout to $RELEASE_BRANCH"

  git_do checkout "$RELEASE_BRANCH" || \
    die "Could not check out $RELEASE_BRANCH."


  mssg "pull from origin/$RELEASE_BRANCH into $RELEASE_BRANCH"

  git_do fetch -q origin
  git_do pull -q origin


  mssg "checkout to $HOTFIX_BRANCH"

  git_do checkout "$HOTFIX_BRANCH" || \
    die "Could not check out $HOTFIX_BRANCH."


  mssg "marge from $RELEASE_BRANCH into $HOTFIX_BRANCH"

  git_do merge --no-ff "$RELEASE_BRANCH" -m "### marge from $RELEASE_BRANCH into $HOTFIX_BRANCH" || \
    die "There were merge conflicts."


  mssg "create patch file $PATCH_FILE between $HOTFIX_BRANCH and $RELEASE_BRANCH"

  mkdir -p ./patches/applied 1> /dev/null 2> /dev/null

  git_do format-patch "$RELEASE_BRANCH" --stdout > "$PATCH_FILE" || \
    die "Could not create patch."


  mssg "marge from $RELEASE_BRANCH into $HOTFIX_BRANCH"

  git_do merge --no-ff "$RELEASE_BRANCH" -m "### marge from $RELEASE_BRANCH into $HOTFIX_BRANCH" || \
    die "There were merge conflicts."


  mssg "check building"

  $AF_DIR/hooks/build-check "$VERSION_SHORT" "$VERSION_NAME" "$VERSION_TYPE" "$VERSION_LONG" || \
    die "There were check build problem."


  mssg "checkout to $RELEASE_BRANCH"

  git_do checkout "$RELEASE_BRANCH" || \
    die "Could not check out $RELEASE_BRANCH."


  mssg "marge from $HOTFIX_BRANCH into $RELEASE_BRANCH"

  git_do merge --no-ff "$HOTFIX_BRANCH" -m "### marge from $HOTFIX_BRANCH into $RELEASE_BRANCH" || \
    die "There were merge conflicts."


  mssg "push $RELEASE_BRANCH to origin"

  git_do push origin "$RELEASE_BRANCH" || \
    die "Pushing master to origin failed. Please run finish again to retry."


  mssg "delete $HOTFIX_BRANCH"

  git_do branch -D "$HOTFIX_BRANCH"


  if question_Yn "Do you apply '$PATCH_FILE' to master?"; then
    mssg "checkout to $MASTER_BRANCH"

    git_do checkout "$MASTER_BRANCH" || \
      die "Could not check out $MASTER_BRANCH."


    mssg "start feature $PATCH_FEATURE_NAME"

    $AF_DIR/af feature start "$PATCH_FEATURE_NAME" || \
      die "Could not start feature $PATCH_FEATURE_NAME."


    mssg "apply path $PATCH_FILE to $FEATURE_PREFIX$PATCH_FEATURE_NAME"

    APPLIED_PATCH=1
    git_do apply "$PATCH_FILE" || \
      while true; do
        warn "Could not apply path $PATCH_FILE to $PATCH_FEATURE_BRANCH"
        APPLIED_PATCH=0
        echo " * please manual apply $PATCH_FILE file to branches"
        break
      done


    if [[ "$APPLIED_PATCH" = "1" ]]; then
      mv "$PATCH_FILE" "$APPLIED_PATCH_FILE"

      if question_Yn "Do you finish feature '$PATCH_FEATURE_NAME'?"; then
        mssg "commit applied files"

        git_do add -A

        git_do commit -a -m "### apply patch $APPLIED_PATCH_FILE"

        $AF_DIR/af feature finish || \
          die "Could not finish feature $PATCH_FEATURE_NAME."
      fi

      if question_Yn "Do you remove '$APPLIED_PATCH_FILE' file?"; then
        mssg "remove patch file $APPLIED_PATCH_FILE"

        rm -r $APPLIED_PATCH_FILE 1> /dev/null 2> /dev/null
      fi
    fi


    mssg "checkout to $RELEASE_BRANCH"

    git_do checkout "$RELEASE_BRANCH" || \
      die "Could not check out $RELEASE_BRANCH."
  else
    warn "please manual apply $PATCH_FILE file to branches"
  fi


  mssg "done"
}


cmd_help() {
  usage
  exit 0
}
