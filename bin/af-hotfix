#!/bin/bash


init() {
  require_git_repo
  require_af_initialized
  af_load_settings
  af_load_version
}


cmd_default() {
  usage
  exit 0
}


cmd_start() {
  parse_args "$@"

  if [[ "$1" = "" ]]; then
    usage
    exit 1
  fi

  HOTFIX_NAME=""
  while [[ ! "$1" = "" ]] ; do
    if [[ "$HOTFIX_NAME" = "" ]] ; then
      HOTFIX_NAME="$1"
    else
      name="_$1"
      HOTFIX_NAME="$HOTFIX_NAME$name"
    fi
    shift
  done

  HOTFIX_BRANCH="$HOTFIX_PREFIX$VERSION_A.$VERSION_B-$HOTFIX_NAME"


  require_current_branch_prefix $RELEASE_PREFIX
  require_branch_absent $HOTFIX_BRANCH

  
  mssg "create hotfix branch: $HOTFIX_BRANCH"

  # create branch
  git_do checkout -b "$HOTFIX_BRANCH" || \
    die "Could not check out $HOTFIX_BRANCH"


  mssg "done"
}


cmd_finish() {
  parse_args "$@"

  HOTFIX_BRANCH=`git_current_branch`
  RELEASE_BRANCH="$RELEASE_PREFIX$VERSION_A.$VERSION_B"

  HOTFIX_NAME=`echo "$HOTFIX_BRANCH" | sed -e "s!^$HOTFIX_PREFIX!!"`

  PATCH_PREFIX="apply_patch_"
  PATCH_FEATURE_NAME="$PATCH_PREFIX$HOTFIX_NAME"


  require_clean_working_tree
  require_current_branch_prefix $HOTFIX_PREFIX

  if has "$ORIGIN/$RELEASE_BRANCH" $(git_remote_branches); then
    require_branches_equal "$RELEASE_BRANCH" "$ORIGIN/$RELEASE_BRANCH"
  fi

  if git_is_branch_merged_into "$HOTFIX_BRANCH" "$MASTER_BRANCH"; then
    die "There were merge conflicts from $HOTFIX_BRANCH into $MASTER_BRANCH."
  fi


  mssg "checkout to $RELEASE_BRANCH"

  git_do checkout "$RELEASE_BRANCH" || \
    die "Could not check out $RELEASE_BRANCH."


  mssg "pull from origin/$RELEASE_BRANCH into $RELEASE_BRANCH"

  git_do fetch origin
  git_do pull origin


  mssg "checkout to $HOTFIX_BRANCH"

  git_do checkout "$HOTFIX_BRANCH" || \
    die "Could not check out $HOTFIX_BRANCH."


  mssg "marge from $RELEASE_BRANCH into $HOTFIX_BRANCH"

  git_do merge --no-ff "$RELEASE_BRANCH" -m "### marge from $RELEASE_BRANCH into $HOTFIX_BRANCH" || \
    die "There were merge conflicts."


  mssg "checkout to $RELEASE_BRANCH"

  git_do checkout "$RELEASE_BRANCH" || \
    die "Could not check out $RELEASE_BRANCH."


  mssg "marge from $HOTFIX_BRANCH into $RELEASE_BRANCH"

  git_do merge --no-ff "$HOTFIX_BRANCH" -m "### marge from $HOTFIX_BRANCH into $RELEASE_BRANCH" || \
    die "There were merge conflicts."


  mssg "push $RELEASE_BRANCH to origin"

  git_do push origin "$RELEASE_BRANCH" || \
    die "Pushing master to origin failed. Please run finish again to retry."


  mssg "delete $HOTFIX_BRANCH"

  git_do branch -D "$HOTFIX_BRANCH"


  #TODO: add cherry pick from release to master


  mssg "done"
}

cmd_list() {
  parse_args "$@"

  local_branches=( `git_local_branches` )
  current_branch=( `git_current_branch` )

  printed="NO"
  for branch in ${local_branches[@]}; do
    if [[ $branch == $HOTFIX_PREFIX* ]] ; then

      if [[ $branch == $current_branch ]] ; then
        clr_green "* $branch"
      else
        clr_blue "  $branch"
      fi

      printed="YES"
    fi
  done

  if [[ $printed == "NO" ]] ; then
    clr_brown "  nothing"
  fi
}


usage_init() {
  FLAGS_HELP=`cat << EndOfMessage
USAGE: af hotfix start [-s] [-g] [-h] <name>
       af hotfix finish [-s] [-g] [-h]
       af hotfix list [-s] [-g] [-h]
  
subcommans:
  start           Create hotfix branch (run on release/*.* branch).
  finish          Finish hotfix branch (run on hotfix/* branch).
  migrate         Migrate hotfix to 'release/<x.y>' branch (run on hotfix/* branch).
  list            Print all hotfix branches
 
EndOfMessage`
}

